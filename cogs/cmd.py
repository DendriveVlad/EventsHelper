from time import time, ctime

from nextcord import *
from nextcord.ext import commands

from config import *
from DataBase import DB
from Buttons import ChoiceDay, EventRemoveAccept, Voting

db = DB()


class CMD(commands.Cog):
    def __init__(self, bot):
        self.client = bot

    @slash_command(name="create", description="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", guild_ids=[GUILD_ID])
    async def create(self, interaction: Interaction, event_name):
        if interaction.channel_id != CHANNELS["Organizers"]:
            await interaction.response.send_message(embed=Embed(title="‚ùåWrong channel‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if len(event_name) > 128:
            await interaction.response.send_message(embed=Embed(title="‚ùå–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 128 —Å–∏–º–≤–æ–ª–æ–≤‚ùå", description=f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∫–æ—Ä–æ—á–µ: **{event_name}**", colour=0xBF1818), ephemeral=True)
            return
        view = ChoiceDay()
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", ephemeral=True, view=view)
        await view.wait()
        if not view.time:
            return

        weekdays = ("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
        now_time = int(time())
        if weekdays.index(ctime(now_time)[0:3]) > 4:
            now_time += 172800
        unix_event = ((now_time + 86400 * (view.day - (weekdays.index(ctime(now_time)[0:3]) + 1))) - [(h * 60 + m) * 60 + s for h, m, s in [list(map(int, ctime(now_time)[11:19].split(":")))]][0]) + (view.time * 60 * 60 if view.time < 100 else ((view.time // 10) * 60 + 30) * 60)
        event = ctime(unix_event).split()
        schedule_event = self.__getEventDetails(event)
        for channel in interaction.guild.channels:
            if channel.id == CHANNELS["Events_list"]:
                event_message = await channel.send(embed=Embed(title=event_name, description=f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ **{schedule_event["day"]} {schedule_event["date"]} {schedule_event["month"]}** –≤ **{schedule_event["time"]}** –ø–æ –ú–°–ö.\n'
                                                                                             f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {interaction.user.mention}', colour=0x5BF5D1))
                db.insert("events", datetime=unix_event, name=event_name, organizer=interaction.user.id, message_id=event_message.id)
            elif channel.id == CHANNELS["Organizers"]:
                await channel.send(f"<@{interaction.user.id}> —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ", embed=Embed(title=event_name, description=f'–ù–∞ {schedule_event["day"]} {schedule_event["date"]} {schedule_event["month"]} –≤ {schedule_event["time"]} –ø–æ –ú–°–ö.', colour=0x21F300))

    @slash_command(name="remove", description="–û—Ç–º–µ–Ω–∏—Ç—å –∏–≤–µ–Ω—Ç", guild_ids=[GUILD_ID])
    async def remove(self, interaction: Interaction, event_name):
        if interaction.channel_id != CHANNELS["Organizers"]:
            await interaction.response.send_message(embed=Embed(title="‚ùåWrong channel‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if len(event_name) > 128:
            await interaction.response.send_message(embed=Embed(title="‚ùå–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 128 —Å–∏–º–≤–æ–ª–æ–≤‚ùå", colour=0xBF1818), ephemeral=True)
            return
        event = db.select("events", f"name == '{event_name}'")
        if not event:
            await interaction.response.send_message(embed=Embed(title="‚ùå–¢–∞–∫–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå", colour=0xBF1818), ephemeral=True)
            return
        today = ctime(int(time())).split()
        if today[0] in ("Sat", "Sun"):
            block_date = (int(today[2])) if today[0] == "Sun" else (int(today[2]), int(today[2]) + 1)
            if int(ctime(event["datetime"]).split()[2]) in block_date:
                await interaction.response.send_message(embed=Embed(title="‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —É–∂–µ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –∏–≤–µ–Ω—Ç‚ùå", description="–ï—Å–ª–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–≤–µ–Ω—Ç, —Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–≥–æ", colour=0xBF1818), ephemeral=True)
                return

        view = EventRemoveAccept()
        await interaction.response.send_message(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç **{event['name']}**?", ephemeral=True, view=view)
        await view.wait()
        if view.accept:
            db.delete("events", f"name == '{event_name}'")
            for channel in interaction.guild.channels:
                if channel.id == CHANNELS["Events_list"]:
                    m = await channel.fetch_message(event["message_id"])
                    await m.delete()
                elif channel.id == CHANNELS["Organizers"]:
                    schedule_event = self.__getEventDetails(ctime(event["datetime"]).split())
                    await channel.send(f"{interaction.user.mention} –æ—Ç–º–µ–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ", embed=Embed(title=event_name, description=f'–ù–∞ {schedule_event["day"]} {schedule_event["date"]} {schedule_event["month"]} –≤ {schedule_event["time"]} –ø–æ –ú–°–ö.', colour=0x21F300))

    @slash_command(name="promote", description="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", guild_ids=[GUILD_ID])
    async def promote(self, interaction: Interaction, mention):
        if interaction.channel_id != CHANNELS["Organizers"]:
            await interaction.response.send_message(embed=Embed(title="‚ùåWrong channel‚ùå", colour=0xBF1818), ephemeral=True)
            return
        member = self.__getMember(mention)
        if not member:
            await interaction.response.send_message(embed=Embed(title="‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if member.id == MY_ID:
            await interaction.response.send_message(embed=Embed(title="‚ùåü§ñ–ë–æ—Ç –Ω–µ —á–µ–ª–æ–≤–µ–∫‚ùå", colour=0xBF1818), ephemeral=True)
            return
        member_date = db.select("members", f"id == '{member.id}'")
        if member_date["organizer"]:
            await interaction.response.send_message(embed=Embed(title="‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º‚ùå", colour=0xBF1818), ephemeral=True)
            return

        orgs_count = self.__GetOrgsCount()
        view = Voting(orgs_count, interaction.user, f"{interaction.user.mention} —Ö–æ—á–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} –¥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**.")
        await interaction.response.send_message(f"{interaction.user.mention} —Ö–æ—á–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} –¥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**. (1/{orgs_count if orgs_count <= 5 else 5})", view=view)
        await view.wait()
        for channel in interaction.guild.channels:
            if channel.id == CHANNELS["Organizers"]:
                if view.accept_count >= view.max:
                    await channel.send(embed=Embed(title=f"{member} –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–æ–ª—å –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", colour=0x21F300))
                    await member.add_roles(utils.get(member.guild.roles, id=ROLES["Organizer"]))
                    db.update("members", f"id == {member.id}", organizer=1)
                else:
                    await channel.send(embed=Embed(title=f"{member} –ù–ï –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–æ–ª—å –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤", colour=0xBF1818))
                break

    @slash_command(name="demote", description="–°–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", guild_ids=[GUILD_ID])
    async def demote(self, interaction: Interaction, mention):
        if interaction.channel_id != CHANNELS["Organizers"]:
            await interaction.response.send_message(embed=Embed(title="‚ùåWrong channel‚ùå", colour=0xBF1818), ephemeral=True)
            return
        member = self.__getMember(mention)
        if not member:
            await interaction.response.send_message(embed=Embed(title="‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if member.id == MY_ID:
            await interaction.response.send_message(embed=Embed(title="‚ùåü§ñ–ë–æ—Ç –Ω–µ —á–µ–ª–æ–≤–µ–∫‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if member.id == VLAD_ID:
            await interaction.response.send_message("._.", ephemeral=True)
            return
        member_date = db.select("members", f"id == '{member.id}'")
        if not member_date["organizer"]:
            await interaction.response.send_message(embed=Embed(title="‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º‚ùå", colour=0xBF1818), ephemeral=True)
            return

        orgs_count = self.__GetOrgsCount()
        if orgs_count < 6:
            orgs_count -= 1
        view = Voting(orgs_count, interaction.user, f"{interaction.user.mention} —Ö–æ—á–µ—Ç —Å–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**.")
        m = await interaction.response.send_message(f"{interaction.user.mention} —Ö–æ—á–µ—Ç —Å–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**. (1/{orgs_count if orgs_count <= 5 else 5})", view=view)
        await view.wait()
        for channel in interaction.guild.channels:
            if channel.id == CHANNELS["Organizers"]:
                if view.accept_count >= view.max:
                    await channel.send(embed=Embed(title=f"{member} —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", colour=0x21F300))
                    await member.remove_roles(utils.get(member.guild.roles, id=ROLES["Organizer"]))
                    db.update("members", f"id == {member.id}", organizer=0)
                else:
                    await channel.send(embed=Embed(title=f"{member} –ù–ï —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤", colour=0xBF1818))
                break

    @slash_command(name="kick", description="–ò—Å–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞", guild_ids=[GUILD_ID])
    async def kick(self, interaction: Interaction, mention):
        if interaction.channel_id != CHANNELS["Organizers"]:
            await interaction.response.send_message(embed=Embed(title="‚ùåWrong channel‚ùå", colour=0xBF1818), ephemeral=True)
            return
        member = self.__getMember(mention)
        if not member:
            await interaction.response.send_message(embed=Embed(title="‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if member.id == MY_ID:
            await interaction.response.send_message(embed=Embed(title="‚ùåü§ñ–ë–æ—Ç –Ω–µ —á–µ–ª–æ–≤–µ–∫‚ùå", colour=0xBF1818), ephemeral=True)
            return
        if member.id == VLAD_ID:
            await interaction.response.send_message("._.", ephemeral=True)
            return
        member_date = db.select("members", f"id == '{member.id}'")
        orgs_count = self.__GetOrgsCount()
        if orgs_count < 6:
            orgs_count -= 1
        view = Voting(orgs_count, interaction.user, f"{interaction.user.mention} —Ö–æ—á–µ—Ç –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention}. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**.")
        m = await interaction.response.send_message(f"{interaction.user.mention} —Ö–æ—á–µ—Ç –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention}. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å **–ó–ê**. (1/{orgs_count if orgs_count <= 5 else 5})", view=view)
        await view.wait()
        for channel in interaction.guild.channels:
            if channel.id == CHANNELS["Organizers"]:
                if view.accept_count >= view.max:
                    await channel.send(embed=Embed(title=f"{member} –∏—Å–∫–ª—é—á—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞", colour=0x21F300))
                    if member_date["kicked"] >= 2:
                        await member.ban(reason="–¢—Ä–µ—Ç–∏–π –∫–∏–∫. –†–µ—à–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤")
                    else:
                        await member.kick(reason="–†–µ—à–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤")
                    db.update("members", f"id == {member.id}", kicked=member_date["kicked"] + 1)
                else:
                    await channel.send(embed=Embed(title=f"{member} –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤", colour=0xBF1818))
                break

    def __getEventDetails(self, event) -> dict:
        schedule_event = {}
        for i in event:
            match event.index(i):
                case 0:
                    if i == "Sat":
                        schedule_event["day"] = "–°—É–±–±–æ—Ç—É"
                    else:
                        schedule_event["day"] = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                case 1:
                    schedule_event["month"] = {"Jan": "–Ø–Ω–≤–∞—Ä—è", "Feb": "–§–µ–≤—Ä–∞–ª—è", "Mar": "–ú–∞—Ä—Ç–∞", "Apr": "–ê–ø—Ä–µ–ª—è", "May": "–ú–∞—è", "Jun": "–ò—é–Ω—è", "Jul": "–ò—é–ª—è", "Aug": "–ê–≤–≥—É—Å—Ç–∞", "Sep": "–°–µ–Ω—Ç—è–±—Ä—è", "Oct": "–û–∫—Ç—è–±—Ä—è", "Nov": "–ù–æ—è–±—Ä—è", "Dec": "–î–µ–∫–∞–±—Ä—è"}[i]
                case 2:
                    schedule_event["date"] = i
                case 3:
                    schedule_event["time"] = i[0:5]
        return schedule_event

    def __getMember(self, str_member) -> Member | None:
        if len(str_member) in [21, 22] and str_member[0:2] == "<@" and str_member[-1] == ">":
            try:
                return self.client.get_guild(GUILD_ID).get_member(int(str_member[-19:-1]))
            except ValueError:
                pass
        for user in self.client.get_guild(GUILD_ID).members:
            if user.nick:
                if user.nick.lower() == str_member.lower():
                    return user
            elif user.name.lower() == str_member.lower():
                return user
        return None

    def __GetOrgsCount(self) -> int:
        orgs_count = db.select("members", "organizer == 1")
        if type(orgs_count) is dict:
            return 1
        else:
            return len(orgs_count)


def setup(client):
    client.add_cog(CMD(client))
